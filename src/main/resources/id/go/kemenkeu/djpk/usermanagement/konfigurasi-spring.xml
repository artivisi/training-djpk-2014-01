<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

    <!-- ${variabel} dibaca dari file properties -->
    <context:property-placeholder location="
        classpath*:jdbc.properties,
        classpath*:jdbc.properties.private
    " />
    <!-- kalau ${variabel} didefinisikan 
    di jdbc.properties dan juga jdbc.properties.private, 
    maka yang terakhir disebutkan (jdbc.properties.private)
    yang menang
    -->

    
    
    <!-- kalau dilakukan di Java -->
    <!--
    SessionFactory sessionFactory = new LocalSessionFactoryBean();
    sessionFactory.setDataSource(dataSource);
    // dan seterusnya
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>id.go.kemenkeu.djpk.usermanagement.domain</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.hbm2ddl.auto=update
                hibernate.show_sql=true
                hibernate.format_sql=true
            </value>
        </property>
    </bean>
    
    

    <!-- supaya @Transactional diproses -->
    <tx:annotation-driven/>

    <!-- deklarasi manual, nanti ini akan diganti dengan autodetect -->
    <!--
    <bean id="userManagementService"
          class="id.go.kemenkeu.djpk.usermanagement.service.impl.UserManagementServiceImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    -->
    
    <!-- autodetect @Service, @Controller, @Repository, @Component -->
    <context:component-scan 
        base-package="id.go.kemenkeu.djpk.usermanagement.service.impl, id.go.kemenkeu.djpk.usermanagement.dao"/>

    <!-- untuk di development, connect db sendiri, transaction manager pakai punya Spring -->
    <beans profile="default">
        <!-- kalau dilakukan di Java -->
        <!--
        BasicDataSource dataSource = new BasicDataSource();
        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost/dbusermanagement");
        dataSource.setUsername"root");
        // dan seterusnya
        -->
        
        <!-- koneksi database menggunakan library Commons DBCP (database connection pooling) -->
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
            <!-- database driver untuk MySQL -->
            <property name="driverClassName" value="${jdbc.driver}" />
            
            <!-- url database -->
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="maxActive" value="80" />
            <property name="maxWait" value="40000" />
            <property name="maxIdle" value="20" />
            <property name="minIdle" value="8" />
            <property name="initialSize" value="8" />
        </bean>
        <bean id="transactionManager"
              class="org.springframework.orm.hibernate4.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory"/>
        </bean>
    </beans>

    <!-- untuk di production, datasource dan tx manager disediakan appserver -->
    <beans profile="production">
        <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/datasource"/>
        <bean id="transactionManager"
              class="org.springframework.transaction.jta.JtaTransactionManager">
        </bean>
    </beans>
</beans>